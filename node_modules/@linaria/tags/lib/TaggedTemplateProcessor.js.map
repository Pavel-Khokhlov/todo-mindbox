{"version":3,"file":"TaggedTemplateProcessor.js","names":["TaggedTemplateProcessor","BaseProcessor","template","constructor","params","args","validateParams","tag","forEach","element","dependencies","push","build","values","artifacts","length","Error","artifact","templateProcessor","toString"],"sources":["../src/TaggedTemplateProcessor.ts"],"sourcesContent":["import type { TemplateElement, Expression, SourceLocation } from '@babel/types';\n\nimport type { TailProcessorParams } from './BaseProcessor';\nimport BaseProcessor from './BaseProcessor';\nimport type { ExpressionValue, ValueCache, Rules, Params } from './types';\nimport templateProcessor from './utils/templateProcessor';\nimport { validateParams } from './utils/validateParams';\n\nexport default abstract class TaggedTemplateProcessor extends BaseProcessor {\n  #template: (TemplateElement | ExpressionValue)[];\n\n  public constructor(params: Params, ...args: TailProcessorParams) {\n    validateParams(\n      params,\n      ['tag', 'template'],\n      'Invalid usage of template tag'\n    );\n    const [tag, [, template]] = params;\n\n    super([tag], ...args);\n\n    template.forEach((element) => {\n      if ('kind' in element) {\n        this.dependencies.push(element);\n      }\n    });\n\n    this.#template = template;\n  }\n\n  public override build(values: ValueCache) {\n    if (this.artifacts.length > 0) {\n      // FIXME: why it was called twice?\n      throw new Error('Tag is already built');\n    }\n\n    const artifact = templateProcessor(this, this.#template, values);\n    if (artifact) {\n      this.artifacts.push(['css', artifact]);\n    }\n  }\n\n  /**\n   * It is called for each resolved expression in a template literal.\n   * @param node\n   * @param source\n   * @param unit\n   * @return chunk of CSS that should be added to extracted CSS\n   */\n  public abstract addInterpolation(\n    node: Expression,\n    source: string,\n    unit?: string\n  ): string;\n\n  public abstract extractRules(\n    valueCache: ValueCache,\n    cssText: string,\n    loc?: SourceLocation | null\n  ): Rules;\n\n  public override toString(): string {\n    return `${super.toString()}\\`â€¦\\``;\n  }\n}\n"],"mappings":";;;;;;;AAGA;;AAEA;;AACA;;;;AAEe,MAAeA,uBAAf,SAA+CC,sBAA/C,CAA6D;EAC1E,CAACC,QAAD;;EAEOC,WAAW,CAACC,MAAD,EAAiB,GAAGC,IAApB,EAA+C;IAC/D,IAAAC,8BAAA,EACEF,MADF,EAEE,CAAC,KAAD,EAAQ,UAAR,CAFF,EAGE,+BAHF;IAKA,MAAM,CAACG,GAAD,EAAM,GAAGL,QAAH,CAAN,IAAsBE,MAA5B;IAEA,MAAM,CAACG,GAAD,CAAN,EAAa,GAAGF,IAAhB;IAEAH,QAAQ,CAACM,OAAT,CAAkBC,OAAD,IAAa;MAC5B,IAAI,UAAUA,OAAd,EAAuB;QACrB,KAAKC,YAAL,CAAkBC,IAAlB,CAAuBF,OAAvB;MACD;IACF,CAJD;IAMA,KAAK,CAACP,QAAN,GAAiBA,QAAjB;EACD;;EAEeU,KAAK,CAACC,MAAD,EAAqB;IACxC,IAAI,KAAKC,SAAL,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;MAC7B;MACA,MAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;IACD;;IAED,MAAMC,QAAQ,GAAG,IAAAC,0BAAA,EAAkB,IAAlB,EAAwB,KAAK,CAAChB,QAA9B,EAAwCW,MAAxC,CAAjB;;IACA,IAAII,QAAJ,EAAc;MACZ,KAAKH,SAAL,CAAeH,IAAf,CAAoB,CAAC,KAAD,EAAQM,QAAR,CAApB;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EAakBE,QAAQ,GAAW;IACjC,OAAQ,GAAE,MAAMA,QAAN,EAAiB,OAA3B;EACD;;AAvDyE"}