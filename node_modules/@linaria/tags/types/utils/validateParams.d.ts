import type { Param, Params } from '../types';
declare type ParamName = Param[0];
declare type ParamConstraint = ParamName | [...ParamName[]] | '*';
export declare type ParamConstraints = [...ParamConstraint[]] | [...ParamConstraint[], '...'];
declare type GetParamByName<T> = T extends '*' ? Param : T extends (infer TNames extends ParamName)[] ? Extract<Param, readonly [TNames, ...unknown[]]> : T extends ParamName ? Extract<Param, readonly [T, ...unknown[]]> : never;
export declare type MapParams<TNames extends ParamConstraints, TRes extends Param[] = []> = TNames extends [infer THead, ...infer TTail extends ParamConstraints] ? THead extends '...' ? [...TRes, ...Params] : MapParams<TTail, [...TRes, GetParamByName<THead>]> : TRes;
export declare function isValidParams<T extends ParamConstraints>(params: Params, constraints: T): params is MapParams<T>;
export declare function validateParams<T extends ParamConstraints>(params: Params, constraints: T, message: string): asserts params is MapParams<T>;
export {};
