{"version":3,"file":"JSXElementsRemover.js","names":["types","t","mutate","getFunctionName","path","isClassMethod","isIdentifier","node","key","name","JSXElementsRemover","nullLiteral","functionScope","scope","getFunctionParent","scopePath","isFunction","emptyBody","blockStatement","returnStatement","decl","findParent","p","isClassDeclaration","replaceWith","functionDeclaration","id","body","get","Array","isArray","Error","params"],"sources":["../../src/visitors/JSXElementsRemover.ts"],"sourcesContent":["import { types as t } from '@babel/core';\nimport type { NodePath } from '@babel/traverse';\nimport type {\n  CallExpression,\n  Function as FunctionNode,\n  JSX,\n} from '@babel/types';\n\nimport { mutate } from '../scopeHelpers';\n\nfunction getFunctionName(path: NodePath<FunctionNode>): string | null {\n  if (path.isClassMethod() && t.isIdentifier(path.node.key)) {\n    return path.node.key.name;\n  }\n\n  return null;\n}\n\nexport default function JSXElementsRemover(\n  path: NodePath<JSX | CallExpression>\n) {\n  // JSX can be safely replaced with null because it is unnecessary for styles\n  const nullLiteral = t.nullLiteral();\n\n  // We can do even more\n  // If that JSX is a result of a function, we can replace the function body.\n  const functionScope = path.scope.getFunctionParent();\n  const scopePath = functionScope?.path;\n  if (scopePath?.isFunction()) {\n    const emptyBody = t.blockStatement([t.returnStatement(nullLiteral)]);\n\n    // Is it not just a function, but a method `render`?\n    if (getFunctionName(scopePath) === 'render') {\n      const decl = scopePath.findParent((p) => p.isClassDeclaration());\n\n      // Replace the whole component\n      if (decl?.isClassDeclaration()) {\n        mutate(decl, (p) => {\n          p.replaceWith(t.functionDeclaration(decl.node.id, [], emptyBody));\n        });\n\n        return;\n      }\n    }\n\n    const body = scopePath.get('body');\n    if (Array.isArray(body)) {\n      throw new Error(\n        \"A body of a function is expected to be a single element but an array was returned. It's possible if JS syntax has been changed since that code was written.\"\n      );\n    }\n\n    const node: typeof scopePath.node = {\n      ...scopePath.node,\n      body: emptyBody,\n      params: [],\n    };\n\n    mutate(scopePath, (p) => {\n      p.replaceWith(node);\n    });\n  } else {\n    mutate(path, (p) => {\n      p.replaceWith(nullLiteral);\n    });\n  }\n}\n"],"mappings":"AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,aAA3B;AAQA,SAASC,MAAT,QAAuB,iBAAvB;;AAEA,SAASC,eAAT,CAAyBC,IAAzB,EAAsE;EACpE,IAAIA,IAAI,CAACC,aAAL,MAAwBJ,CAAC,CAACK,YAAF,CAAeF,IAAI,CAACG,IAAL,CAAUC,GAAzB,CAA5B,EAA2D;IACzD,OAAOJ,IAAI,CAACG,IAAL,CAAUC,GAAV,CAAcC,IAArB;EACD;;EAED,OAAO,IAAP;AACD;;AAED,eAAe,SAASC,kBAAT,CACbN,IADa,EAEb;EACA;EACA,MAAMO,WAAW,GAAGV,CAAC,CAACU,WAAF,EAApB,CAFA,CAIA;EACA;;EACA,MAAMC,aAAa,GAAGR,IAAI,CAACS,KAAL,CAAWC,iBAAX,EAAtB;EACA,MAAMC,SAAS,GAAGH,aAAa,EAAER,IAAjC;;EACA,IAAIW,SAAS,EAAEC,UAAX,EAAJ,EAA6B;IAC3B,MAAMC,SAAS,GAAGhB,CAAC,CAACiB,cAAF,CAAiB,CAACjB,CAAC,CAACkB,eAAF,CAAkBR,WAAlB,CAAD,CAAjB,CAAlB,CAD2B,CAG3B;;IACA,IAAIR,eAAe,CAACY,SAAD,CAAf,KAA+B,QAAnC,EAA6C;MAC3C,MAAMK,IAAI,GAAGL,SAAS,CAACM,UAAV,CAAsBC,CAAD,IAAOA,CAAC,CAACC,kBAAF,EAA5B,CAAb,CAD2C,CAG3C;;MACA,IAAIH,IAAI,EAAEG,kBAAN,EAAJ,EAAgC;QAC9BrB,MAAM,CAACkB,IAAD,EAAQE,CAAD,IAAO;UAClBA,CAAC,CAACE,WAAF,CAAcvB,CAAC,CAACwB,mBAAF,CAAsBL,IAAI,CAACb,IAAL,CAAUmB,EAAhC,EAAoC,EAApC,EAAwCT,SAAxC,CAAd;QACD,CAFK,CAAN;QAIA;MACD;IACF;;IAED,MAAMU,IAAI,GAAGZ,SAAS,CAACa,GAAV,CAAc,MAAd,CAAb;;IACA,IAAIC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;MACvB,MAAM,IAAII,KAAJ,CACJ,6JADI,CAAN;IAGD;;IAED,MAAMxB,IAA2B,GAAG,EAClC,GAAGQ,SAAS,CAACR,IADqB;MAElCoB,IAAI,EAAEV,SAF4B;MAGlCe,MAAM,EAAE;IAH0B,CAApC;IAMA9B,MAAM,CAACa,SAAD,EAAaO,CAAD,IAAO;MACvBA,CAAC,CAACE,WAAF,CAAcjB,IAAd;IACD,CAFK,CAAN;EAGD,CAjCD,MAiCO;IACLL,MAAM,CAACE,IAAD,EAAQkB,CAAD,IAAO;MAClBA,CAAC,CAACE,WAAF,CAAcb,WAAd;IACD,CAFK,CAAN;EAGD;AACF"}