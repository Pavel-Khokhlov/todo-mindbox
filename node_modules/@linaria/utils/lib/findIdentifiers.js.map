{"version":3,"file":"findIdentifiers.js","names":["checkers","binding","ex","isBindingIdentifier","both","isReferencedIdentifier","referenced","nonType","path","find","p","isTSTypeReference","isTSTypeQuery","isFlowType","isFlowDeclaration","findIdentifiers","expressions","type","identifiers","forEach","emit","node","removed","scope","getBinding","name","isAncestor","push","isIdentifier","isJSXIdentifier","traverse","TSTypeAnnotation","skip","Identifier","JSXIdentifier"],"sources":["../src/findIdentifiers.ts"],"sourcesContent":["import type { NodePath } from '@babel/traverse';\nimport type { Node, Identifier, JSXIdentifier } from '@babel/types';\n\ntype FindType = 'binding' | 'both' | 'referenced';\n\nconst checkers: Record<FindType, (ex: NodePath) => boolean> = {\n  binding: (ex) => ex.isBindingIdentifier(),\n  both: (ex) => ex.isBindingIdentifier() || ex.isReferencedIdentifier(),\n  referenced: (ex) => ex.isReferencedIdentifier(),\n};\n\nexport function nonType(path: NodePath): boolean {\n  return !path.find(\n    (p) =>\n      p.isTSTypeReference() ||\n      p.isTSTypeQuery() ||\n      p.isFlowType() ||\n      p.isFlowDeclaration()\n  );\n}\n\nexport default function findIdentifiers(\n  expressions: NodePath<Node | null | undefined>[],\n  type: FindType = 'referenced'\n): NodePath<Identifier | JSXIdentifier>[] {\n  const identifiers: NodePath<Identifier | JSXIdentifier>[] = [];\n\n  expressions.forEach((ex) => {\n    const emit = (path: NodePath<Identifier | JSXIdentifier>) => {\n      if (!path.node || path.removed || !checkers[type](path)) {\n        return;\n      }\n\n      if (!nonType(path)) {\n        // If skip in TSTypeAnnotation visitor doesn't work\n        return;\n      }\n\n      // TODO: Is there a better way to check that it's a local variable?\n\n      const binding = path.scope.getBinding(path.node.name);\n      if (!binding) {\n        return;\n      }\n\n      if (type === 'referenced' && ex.isAncestor(binding.path)) {\n        // This identifier is declared inside the expression. We don't need it.\n        return;\n      }\n\n      identifiers.push(path);\n    };\n\n    if (ex.isIdentifier() || ex.isJSXIdentifier()) {\n      emit(ex);\n    } else {\n      ex.traverse({\n        TSTypeAnnotation(path) {\n          // We ignore identifiers in type annotations\n          // It will produce broken TS code, but we don't care\n          path.skip();\n        },\n        Identifier(path: NodePath<Identifier>) {\n          emit(path);\n        },\n        JSXIdentifier(path: NodePath<JSXIdentifier>) {\n          emit(path);\n        },\n      });\n    }\n  });\n\n  return identifiers;\n}\n"],"mappings":";;;;;;;AAKA,MAAMA,QAAqD,GAAG;EAC5DC,OAAO,EAAGC,EAAD,IAAQA,EAAE,CAACC,mBAAH,EAD2C;EAE5DC,IAAI,EAAGF,EAAD,IAAQA,EAAE,CAACC,mBAAH,MAA4BD,EAAE,CAACG,sBAAH,EAFkB;EAG5DC,UAAU,EAAGJ,EAAD,IAAQA,EAAE,CAACG,sBAAH;AAHwC,CAA9D;;AAMO,SAASE,OAAT,CAAiBC,IAAjB,EAA0C;EAC/C,OAAO,CAACA,IAAI,CAACC,IAAL,CACLC,CAAD,IACEA,CAAC,CAACC,iBAAF,MACAD,CAAC,CAACE,aAAF,EADA,IAEAF,CAAC,CAACG,UAAF,EAFA,IAGAH,CAAC,CAACI,iBAAF,EALI,CAAR;AAOD;;AAEc,SAASC,eAAT,CACbC,WADa,EAEbC,IAAc,GAAG,YAFJ,EAG2B;EACxC,MAAMC,WAAmD,GAAG,EAA5D;EAEAF,WAAW,CAACG,OAAZ,CAAqBjB,EAAD,IAAQ;IAC1B,MAAMkB,IAAI,GAAIZ,IAAD,IAAgD;MAC3D,IAAI,CAACA,IAAI,CAACa,IAAN,IAAcb,IAAI,CAACc,OAAnB,IAA8B,CAACtB,QAAQ,CAACiB,IAAD,CAAR,CAAeT,IAAf,CAAnC,EAAyD;QACvD;MACD;;MAED,IAAI,CAACD,OAAO,CAACC,IAAD,CAAZ,EAAoB;QAClB;QACA;MACD,CAR0D,CAU3D;;;MAEA,MAAMP,OAAO,GAAGO,IAAI,CAACe,KAAL,CAAWC,UAAX,CAAsBhB,IAAI,CAACa,IAAL,CAAUI,IAAhC,CAAhB;;MACA,IAAI,CAACxB,OAAL,EAAc;QACZ;MACD;;MAED,IAAIgB,IAAI,KAAK,YAAT,IAAyBf,EAAE,CAACwB,UAAH,CAAczB,OAAO,CAACO,IAAtB,CAA7B,EAA0D;QACxD;QACA;MACD;;MAEDU,WAAW,CAACS,IAAZ,CAAiBnB,IAAjB;IACD,CAvBD;;IAyBA,IAAIN,EAAE,CAAC0B,YAAH,MAAqB1B,EAAE,CAAC2B,eAAH,EAAzB,EAA+C;MAC7CT,IAAI,CAAClB,EAAD,CAAJ;IACD,CAFD,MAEO;MACLA,EAAE,CAAC4B,QAAH,CAAY;QACVC,gBAAgB,CAACvB,IAAD,EAAO;UACrB;UACA;UACAA,IAAI,CAACwB,IAAL;QACD,CALS;;QAMVC,UAAU,CAACzB,IAAD,EAA6B;UACrCY,IAAI,CAACZ,IAAD,CAAJ;QACD,CARS;;QASV0B,aAAa,CAAC1B,IAAD,EAAgC;UAC3CY,IAAI,CAACZ,IAAD,CAAJ;QACD;;MAXS,CAAZ;IAaD;EACF,CA3CD;EA6CA,OAAOU,WAAP;AACD"}