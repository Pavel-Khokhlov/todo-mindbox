import type { Binding, NodePath } from '@babel/traverse';
import type { Identifier, JSXIdentifier } from '@babel/types';
export declare function reference(path: NodePath<Identifier | JSXIdentifier>, referencePath?: NodePath, force?: boolean): void;
export declare function dereference(path: NodePath<Identifier | JSXIdentifier>): Binding | null;
export declare function referenceAll(path: NodePath): void;
export declare function findParentForDelete(path: NodePath): NodePath | null;
declare function removeWithRelated(paths: NodePath[]): void;
declare function mutate<T extends NodePath>(path: T, fn: (p: T) => NodePath[] | void): void;
export { mutate, removeWithRelated };
