import { TaggedTemplateProcessor } from '@linaria/tags';
export default class CssProcessor extends TaggedTemplateProcessor {
  // eslint-disable-next-line class-methods-use-this
  addInterpolation(node, source) {
    throw new Error(`css tag cannot handle '${source}' as an interpolated value`);
  }

  doEvaltimeReplacement() {
    this.replacer(this.value, false);
  }

  doRuntimeReplacement() {
    this.replacer(this.astService.stringLiteral(this.className), false);
  }

  extractRules(valueCache, cssText, loc) {
    const rules = {};
    const selector = `.${this.className}`;
    rules[selector] = {
      cssText,
      className: this.className,
      displayName: this.displayName,
      start: loc?.start ?? null
    };
    return rules;
  }

  get asSelector() {
    return this.className;
  }

  get value() {
    return this.astService.stringLiteral(this.className);
  }

}
//# sourceMappingURL=css.js.map