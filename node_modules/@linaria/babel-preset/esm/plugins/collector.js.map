{"version":3,"file":"collector.js","names":["debug","removeWithRelated","processTemplateExpression","collector","babel","options","values","Map","name","pre","file","opts","filename","processors","path","traverse","Identifier","p","processor","build","doRuntimeReplacement","push","visitor","post","length","metadata","linaria","replacements","rules","dependencies","prevalExport","scope","getData","findParent","isExpressionStatement"],"sources":["../../src/plugins/collector.ts"],"sourcesContent":["/**\n * Collector traverses the AST and collects information about imports and\n * all Linaria template literals.\n */\n\nimport type { BabelFile, PluginObj } from '@babel/core';\nimport type { NodePath } from '@babel/traverse';\n\nimport { debug } from '@linaria/logger';\nimport type { StrictOptions } from '@linaria/utils';\nimport { removeWithRelated } from '@linaria/utils';\n\nimport type { Core } from '../babel';\nimport type { IPluginState, ValueCache } from '../types';\nimport processTemplateExpression from '../utils/processTemplateExpression';\n\nexport default function collector(\n  babel: Core,\n  options: StrictOptions & { values?: ValueCache }\n): PluginObj<IPluginState> {\n  const values = options.values ?? new Map<string, unknown>();\n  return {\n    name: '@linaria/babel/collector',\n    pre(file: BabelFile) {\n      debug('collect:start', file.opts.filename);\n\n      this.processors = [];\n\n      file.path.traverse({\n        // TODO: process transformed literals\n        Identifier: (p) => {\n          processTemplateExpression(p, file.opts, options, (processor) => {\n            processor.build(values);\n\n            processor.doRuntimeReplacement();\n            this.processors.push(processor);\n          });\n        },\n      });\n    },\n    visitor: {},\n    post(file: BabelFile) {\n      if (this.processors.length === 0) {\n        // We didn't find any Linaria template literals.\n        return;\n      }\n\n      this.file.metadata.linaria = {\n        processors: this.processors,\n        replacements: [],\n        rules: {},\n        dependencies: [],\n      };\n\n      // We can remove __linariaPreval export and all related code\n      const prevalExport = (\n        file.path.scope.getData('__linariaPreval') as NodePath | undefined\n      )?.findParent((p) => p.isExpressionStatement());\n      if (prevalExport) {\n        removeWithRelated([prevalExport]);\n      }\n\n      debug('collect:end', file.opts.filename);\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AAKA,SAASA,KAAT,QAAsB,iBAAtB;AAEA,SAASC,iBAAT,QAAkC,gBAAlC;AAIA,OAAOC,yBAAP,MAAsC,oCAAtC;AAEA,eAAe,SAASC,SAAT,CACbC,KADa,EAEbC,OAFa,EAGY;EACzB,MAAMC,MAAM,GAAGD,OAAO,CAACC,MAAR,IAAkB,IAAIC,GAAJ,EAAjC;EACA,OAAO;IACLC,IAAI,EAAE,0BADD;;IAELC,GAAG,CAACC,IAAD,EAAkB;MACnBV,KAAK,CAAC,eAAD,EAAkBU,IAAI,CAACC,IAAL,CAAUC,QAA5B,CAAL;MAEA,KAAKC,UAAL,GAAkB,EAAlB;MAEAH,IAAI,CAACI,IAAL,CAAUC,QAAV,CAAmB;QACjB;QACAC,UAAU,EAAGC,CAAD,IAAO;UACjBf,yBAAyB,CAACe,CAAD,EAAIP,IAAI,CAACC,IAAT,EAAeN,OAAf,EAAyBa,SAAD,IAAe;YAC9DA,SAAS,CAACC,KAAV,CAAgBb,MAAhB;YAEAY,SAAS,CAACE,oBAAV;YACA,KAAKP,UAAL,CAAgBQ,IAAhB,CAAqBH,SAArB;UACD,CALwB,CAAzB;QAMD;MATgB,CAAnB;IAWD,CAlBI;;IAmBLI,OAAO,EAAE,EAnBJ;;IAoBLC,IAAI,CAACb,IAAD,EAAkB;MACpB,IAAI,KAAKG,UAAL,CAAgBW,MAAhB,KAA2B,CAA/B,EAAkC;QAChC;QACA;MACD;;MAED,KAAKd,IAAL,CAAUe,QAAV,CAAmBC,OAAnB,GAA6B;QAC3Bb,UAAU,EAAE,KAAKA,UADU;QAE3Bc,YAAY,EAAE,EAFa;QAG3BC,KAAK,EAAE,EAHoB;QAI3BC,YAAY,EAAE;MAJa,CAA7B,CANoB,CAapB;;MACA,MAAMC,YAAY,GAChBpB,IAAI,CAACI,IAAL,CAAUiB,KAAV,CAAgBC,OAAhB,CAAwB,iBAAxB,CADmB,EAElBC,UAFkB,CAENhB,CAAD,IAAOA,CAAC,CAACiB,qBAAF,EAFA,CAArB;;MAGA,IAAIJ,YAAJ,EAAkB;QAChB7B,iBAAiB,CAAC,CAAC6B,YAAD,CAAD,CAAjB;MACD;;MAED9B,KAAK,CAAC,aAAD,EAAgBU,IAAI,CAACC,IAAL,CAAUC,QAA1B,CAAL;IACD;;EA1CI,CAAP;AA4CD"}