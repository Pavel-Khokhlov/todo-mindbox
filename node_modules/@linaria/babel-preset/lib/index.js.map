{"version":3,"file":"index.js","names":["isEnabled","caller","name","evaluate","linaria","babel","options","debug","JSON","stringify","plugins","transform","loadLinariaOptions"],"sources":["../src/index.ts"],"sourcesContent":["/**\n * File defines babel prest for Linaria.\n * It uses ./extract function that is an entry point for styles extraction.\n * It also bypass babel options defined in Linaria config file with it's defaults (see ./utils/loadOptions).\n */\nimport type { ConfigAPI, TransformCaller } from '@babel/core';\n\nimport { debug } from '@linaria/logger';\n\nimport transform from './plugins/babel-transform';\nimport type { PluginOptions } from './transform-stages/helpers/loadLinariaOptions';\nimport loadLinariaOptions from './transform-stages/helpers/loadLinariaOptions';\n\nexport { slugify } from '@linaria/utils';\n\nexport * from './utils/collectTemplateDependencies';\nexport { default as collectTemplateDependencies } from './utils/collectTemplateDependencies';\nexport { default as withLinariaMetadata } from './utils/withLinariaMetadata';\nexport { default as Module } from './module';\nexport { default as transform } from './transform';\nexport * from './types';\nexport { default as loadLinariaOptions } from './transform-stages/helpers/loadLinariaOptions';\nexport type { PluginOptions } from './transform-stages/helpers/loadLinariaOptions';\nexport { transformUrl } from './transform-stages/4-extract';\nexport { default as isNode } from './utils/isNode';\nexport { default as getTagProcessor } from './utils/getTagProcessor';\nexport { default as getVisitorKeys } from './utils/getVisitorKeys';\nexport type { VisitorKeys } from './utils/getVisitorKeys';\nexport { default as peek } from './utils/peek';\nexport { default as processTemplateExpression } from './utils/processTemplateExpression';\n\nfunction isEnabled(caller?: TransformCaller & { evaluate?: true }) {\n  return caller?.name !== 'linaria' || caller.evaluate === true;\n}\n\nexport default function linaria(babel: ConfigAPI, options: PluginOptions) {\n  if (!babel.caller(isEnabled)) {\n    return {};\n  }\n  debug('options', JSON.stringify(options));\n  return {\n    plugins: [[transform, loadLinariaOptions(options)]],\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;AAEA;;AAEA;;AAEA;;AAEA;;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;;AAEA;;AACA;;AACA;;AACA;;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;;AAGA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;AA7BA;AACA;AACA;AACA;AACA;AA2BA,SAASA,SAAT,CAAmBC,MAAnB,EAAmE;EACjE,OAAO,CAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEC,IAAR,MAAiB,SAAjB,IAA8BD,MAAM,CAACE,QAAP,KAAoB,IAAzD;AACD;;AAEc,SAASC,OAAT,CAAiBC,KAAjB,EAAmCC,OAAnC,EAA2D;EACxE,IAAI,CAACD,KAAK,CAACJ,MAAN,CAAaD,SAAb,CAAL,EAA8B;IAC5B,OAAO,EAAP;EACD;;EACD,IAAAO,aAAA,EAAM,SAAN,EAAiBC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAjB;EACA,OAAO;IACLI,OAAO,EAAE,CAAC,CAACC,uBAAD,EAAY,IAAAC,2BAAA,EAAmBN,OAAnB,CAAZ,CAAD;EADJ,CAAP;AAGD"}