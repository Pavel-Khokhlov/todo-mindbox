{"version":3,"file":"collector.js","names":["collector","babel","options","values","Map","name","pre","file","debug","opts","filename","processors","path","traverse","Identifier","p","processTemplateExpression","processor","build","doRuntimeReplacement","push","visitor","post","length","metadata","linaria","replacements","rules","dependencies","prevalExport","scope","getData","findParent","isExpressionStatement","removeWithRelated"],"sources":["../../src/plugins/collector.ts"],"sourcesContent":["/**\n * Collector traverses the AST and collects information about imports and\n * all Linaria template literals.\n */\n\nimport type { BabelFile, PluginObj } from '@babel/core';\nimport type { NodePath } from '@babel/traverse';\n\nimport { debug } from '@linaria/logger';\nimport type { StrictOptions } from '@linaria/utils';\nimport { removeWithRelated } from '@linaria/utils';\n\nimport type { Core } from '../babel';\nimport type { IPluginState, ValueCache } from '../types';\nimport processTemplateExpression from '../utils/processTemplateExpression';\n\nexport default function collector(\n  babel: Core,\n  options: StrictOptions & { values?: ValueCache }\n): PluginObj<IPluginState> {\n  const values = options.values ?? new Map<string, unknown>();\n  return {\n    name: '@linaria/babel/collector',\n    pre(file: BabelFile) {\n      debug('collect:start', file.opts.filename);\n\n      this.processors = [];\n\n      file.path.traverse({\n        // TODO: process transformed literals\n        Identifier: (p) => {\n          processTemplateExpression(p, file.opts, options, (processor) => {\n            processor.build(values);\n\n            processor.doRuntimeReplacement();\n            this.processors.push(processor);\n          });\n        },\n      });\n    },\n    visitor: {},\n    post(file: BabelFile) {\n      if (this.processors.length === 0) {\n        // We didn't find any Linaria template literals.\n        return;\n      }\n\n      this.file.metadata.linaria = {\n        processors: this.processors,\n        replacements: [],\n        rules: {},\n        dependencies: [],\n      };\n\n      // We can remove __linariaPreval export and all related code\n      const prevalExport = (\n        file.path.scope.getData('__linariaPreval') as NodePath | undefined\n      )?.findParent((p) => p.isExpressionStatement());\n      if (prevalExport) {\n        removeWithRelated([prevalExport]);\n      }\n\n      debug('collect:end', file.opts.filename);\n    },\n  };\n}\n"],"mappings":";;;;;;;AAQA;;AAEA;;AAIA;;;;AAdA;AACA;AACA;AACA;AAae,SAASA,SAAT,CACbC,KADa,EAEbC,OAFa,EAGY;EAAA;;EACzB,MAAMC,MAAM,sBAAGD,OAAO,CAACC,MAAX,6DAAqB,IAAIC,GAAJ,EAAjC;EACA,OAAO;IACLC,IAAI,EAAE,0BADD;;IAELC,GAAG,CAACC,IAAD,EAAkB;MACnB,IAAAC,aAAA,EAAM,eAAN,EAAuBD,IAAI,CAACE,IAAL,CAAUC,QAAjC;MAEA,KAAKC,UAAL,GAAkB,EAAlB;MAEAJ,IAAI,CAACK,IAAL,CAAUC,QAAV,CAAmB;QACjB;QACAC,UAAU,EAAGC,CAAD,IAAO;UACjB,IAAAC,kCAAA,EAA0BD,CAA1B,EAA6BR,IAAI,CAACE,IAAlC,EAAwCP,OAAxC,EAAkDe,SAAD,IAAe;YAC9DA,SAAS,CAACC,KAAV,CAAgBf,MAAhB;YAEAc,SAAS,CAACE,oBAAV;YACA,KAAKR,UAAL,CAAgBS,IAAhB,CAAqBH,SAArB;UACD,CALD;QAMD;MATgB,CAAnB;IAWD,CAlBI;;IAmBLI,OAAO,EAAE,EAnBJ;;IAoBLC,IAAI,CAACf,IAAD,EAAkB;MAAA;;MACpB,IAAI,KAAKI,UAAL,CAAgBY,MAAhB,KAA2B,CAA/B,EAAkC;QAChC;QACA;MACD;;MAED,KAAKhB,IAAL,CAAUiB,QAAV,CAAmBC,OAAnB,GAA6B;QAC3Bd,UAAU,EAAE,KAAKA,UADU;QAE3Be,YAAY,EAAE,EAFa;QAG3BC,KAAK,EAAE,EAHoB;QAI3BC,YAAY,EAAE;MAJa,CAA7B,CANoB,CAapB;;MACA,MAAMC,YAAY,4BAChBtB,IAAI,CAACK,IAAL,CAAUkB,KAAV,CAAgBC,OAAhB,CAAwB,iBAAxB,CADgB,0DAAG,sBAElBC,UAFkB,CAENjB,CAAD,IAAOA,CAAC,CAACkB,qBAAF,EAFA,CAArB;;MAGA,IAAIJ,YAAJ,EAAkB;QAChB,IAAAK,wBAAA,EAAkB,CAACL,YAAD,CAAlB;MACD;;MAED,IAAArB,aAAA,EAAM,aAAN,EAAqBD,IAAI,CAACE,IAAL,CAAUC,QAA/B;IACD;;EA1CI,CAAP;AA4CD"}