{"version":3,"file":"4-extract.js","names":["STYLIS_DECLARATION","posixSep","path","posix","sep","transformUrl","url","outputFilename","sourceFilename","platformPath","relative","dirname","resolve","split","join","extractCssFromAst","rules","originalCode","options","mappings","cssText","preprocessor","selector","text","stylis","use","context","decl","replace","match","p1","p2","p3","p4","filename","Object","keys","forEach","index","push","generated","line","column","original","start","name","source","atom","cssSourceMapText","length","generator","SourceMapGenerator","file","mapping","addMapping","setSourceContent","toString","extractStage","processors","allRules","allReplacements","processor","artifacts","artifact","replacements"],"sources":["../../src/transform-stages/4-extract.ts"],"sourcesContent":["import path from 'path';\n\nimport type { Mapping } from 'source-map';\nimport { SourceMapGenerator } from 'source-map';\nimport stylis from 'stylis';\n\nimport type { BaseProcessor, Replacements } from '@linaria/tags';\n\nimport type { Rules, Options, PreprocessorFn } from '../types';\n\nconst STYLIS_DECLARATION = 1;\nconst posixSep = path.posix.sep;\n\nexport function transformUrl(\n  url: string,\n  outputFilename: string,\n  sourceFilename: string,\n  platformPath: typeof path = path\n) {\n  // Replace asset path with new path relative to the output CSS\n  const relative = platformPath.relative(\n    platformPath.dirname(outputFilename),\n    // Get the absolute path to the asset from the path relative to the JS file\n    platformPath.resolve(platformPath.dirname(sourceFilename), url)\n  );\n\n  if (platformPath.sep === posixSep) {\n    return relative;\n  }\n\n  return relative.split(platformPath.sep).join(posixSep);\n}\n\nfunction extractCssFromAst(\n  rules: Rules,\n  originalCode: string,\n  options: Options\n) {\n  const mappings: Mapping[] = [];\n\n  let cssText = '';\n\n  let preprocessor: PreprocessorFn;\n  if (typeof options.preprocessor === 'function') {\n    // eslint-disable-next-line prefer-destructuring\n    preprocessor = options.preprocessor;\n  } else {\n    switch (options.preprocessor) {\n      case 'none':\n        preprocessor = (selector, text) => `${selector} {${text}}\\n`;\n        break;\n      case 'stylis':\n      default:\n        stylis.use(null)((context, decl) => {\n          const { outputFilename } = options;\n          if (context === STYLIS_DECLARATION && outputFilename) {\n            // When writing to a file, we need to adjust the relative paths inside url(..) expressions\n            // It'll allow css-loader to resolve an imported asset properly\n            return decl.replace(\n              /\\b(url\\(([\"']?))(\\.[^)]+?)(\\2\\))/g,\n              (match, p1, p2, p3, p4) =>\n                p1 + transformUrl(p3, outputFilename, options.filename) + p4\n            );\n          }\n\n          return decl;\n        });\n\n        preprocessor = stylis;\n    }\n  }\n\n  Object.keys(rules).forEach((selector, index) => {\n    mappings.push({\n      generated: {\n        line: index + 1,\n        column: 0,\n      },\n      original: rules[selector].start!,\n      name: selector,\n      source: '',\n    });\n\n    if (rules[selector].atom) {\n      // For atoms, we just directly insert cssText, to give the atomizer full control over the rules\n      cssText += `${rules[selector].cssText}\\n`;\n    } else {\n      // Run each rule through stylis to support nesting\n      cssText += `${preprocessor(selector, rules[selector].cssText)}\\n`;\n    }\n  });\n\n  return {\n    cssText,\n    rules,\n\n    get cssSourceMapText() {\n      if (mappings?.length) {\n        const generator = new SourceMapGenerator({\n          file: options.filename.replace(/\\.js$/, '.css'),\n        });\n\n        mappings.forEach((mapping) =>\n          generator.addMapping({ ...mapping, source: options.filename })\n        );\n\n        generator.setSourceContent(options.filename, originalCode);\n\n        return generator.toString();\n      }\n\n      return '';\n    },\n  };\n}\n\n/**\n * Extract artifacts (e.g. CSS) from processors\n */\nexport default function extractStage(\n  processors: BaseProcessor[],\n  originalCode: string,\n  options: Options\n) {\n  let allRules: Rules = {};\n  const allReplacements: Replacements = [];\n  processors.forEach((processor) => {\n    processor.artifacts.forEach((artifact) => {\n      if (artifact[0] !== 'css') return;\n      const [rules, replacements] = artifact[1] as [\n        rules: Rules,\n        sourceMapReplacements: Replacements\n      ];\n\n      allRules = {\n        ...allRules,\n        ...rules,\n      };\n\n      allReplacements.push(...replacements);\n    });\n  });\n\n  return {\n    ...extractCssFromAst(allRules, originalCode, options),\n    replacements: allReplacements,\n  };\n}\n"],"mappings":"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"}