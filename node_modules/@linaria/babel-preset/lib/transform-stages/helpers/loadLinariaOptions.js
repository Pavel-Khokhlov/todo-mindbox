"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = loadLinariaOptions;

var _cosmiconfig = _interopRequireDefault(require("cosmiconfig"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const explorer = (0, _cosmiconfig.default)('linaria');
const cache = new WeakMap();

function loadLinariaOptions(overrides = {}) {
  if (cache.has(overrides)) {
    return cache.get(overrides);
  }

  const {
    configFile,
    ignore,
    rules,
    babelOptions = {},
    ...rest
  } = overrides;
  const result = configFile !== undefined ? explorer.loadSync(configFile) : explorer.searchSync();
  const options = {
    displayName: false,
    evaluate: true,
    extensions: ['.json', '.js', '.jsx', '.ts', '.tsx'],
    rules: rules !== null && rules !== void 0 ? rules : [{
      action: require.resolve('@linaria/shaker')
    }, {
      // The old `ignore` option is used as a default value for `ignore` rule.
      test: ignore !== null && ignore !== void 0 ? ignore : /[\\/]node_modules[\\/]/,
      action: 'ignore'
    }, {
      // Do not ignore ES-modules
      test: (filename, code) => {
        if (!/\/node_modules\//.test(filename)) {
          return false;
        }

        return /(?:^|\n|;)\s*(?:export|import)\s+/.test(code);
      },
      action: require.resolve('@linaria/shaker')
    }],
    babelOptions,
    ...(result ? result.config : null),
    ...rest
  };
  cache.set(overrides, options);
  return options;
}
//# sourceMappingURL=loadLinariaOptions.js.map