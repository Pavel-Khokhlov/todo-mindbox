{"version":3,"file":"collectTemplateDependencies.test.js","names":["File","babel","go","code","parsed","parseAsync","filename","__filename","file","ast","path","traverse","TemplateLiteral","expressions","get","forEach","exp","isExpression","extractExpression","generate","describe","it","dedent","expect","toMatchSnapshot","assertions","e","stripAnsi","message"],"sources":["../../../src/utils/__tests__/collectTemplateDependencies.test.ts"],"sourcesContent":["import * as babel from '@babel/core';\nimport { parseAsync } from '@babel/core';\nimport generate from '@babel/generator';\nimport dedent from 'dedent';\nimport stripAnsi from 'strip-ansi';\n\nimport type { MissedBabelCoreTypes } from '../../types';\nimport { extractExpression } from '../collectTemplateDependencies';\n\nconst { File } = babel as typeof babel & MissedBabelCoreTypes;\n\nasync function go(code: string): Promise<string> {\n  const parsed = (await parseAsync(code, {\n    filename: __filename,\n  }))!;\n\n  const file = new File({ filename: __filename }, { code, ast: parsed });\n\n  file.path.traverse({\n    TemplateLiteral(path) {\n      const expressions = path.get('expressions');\n      expressions.forEach((exp) => {\n        if (exp.isExpression()) {\n          extractExpression(exp, true, false);\n        }\n      });\n    },\n  });\n\n  return generate(parsed).code;\n}\n\ndescribe('collectTemplateDependencies', () => {\n  it('hoist expressions', async () => {\n    const code = dedent`\n      import x from \"module\";\n\n      function fn() {\n        const value = 21;\n        const variable = \"test\";\n        const result = \"result\";\n        const template = tag\\`${'${value * 2}'}${'${variable}'}${'${(() => result)}'}${'${value * x}'}\\`;\n      }\n    `;\n\n    expect(await go(code)).toMatchSnapshot();\n  });\n\n  it('should hoist expressions after imports', async () => {\n    const code = dedent`\n      import { styled } from '@linaria/react';\n      import slugify from '../__fixtures__/slugify';\n\n      export const Title = styled.h1\\`\n        &:before {\n          content: \"${\"${slugify('test')}\"}\"\n        }\n      \\`;\n    `;\n\n    expect(await go(code)).toMatchSnapshot();\n  });\n\n  it('non-hoistable expression', async () => {\n    expect.assertions(1);\n\n    const code = dedent`\n      function fn(arg) {\n        {\n          const base = \"base\";\n          const variable = base + arg;\n          const template = tag\\`${'${variable}'}\\`;\n        }\n      }\n    `;\n\n    try {\n      await go(code);\n    } catch (e) {\n      expect(stripAnsi((e as { message: string }).message)).toMatchSnapshot();\n    }\n  });\n\n  it('hoist chain of statements', async () => {\n    const code = dedent`\n      import str from \"module\";\n\n      function fn() {\n        {\n          const arg = str;\n          const variable = arg + \"2\";\n          const template = tag\\`${'${variable}'}\\`;\n        }\n      }\n    `;\n\n    expect(await go(code)).toMatchSnapshot();\n  });\n\n  it('hoistExpression with destructuring', async () => {\n    const code = dedent`\n      function fn() {\n        const result = \"result\";\n        const { variable } = { variable: result };\n        const template = tag\\`${'${variable}'}\\`;\n      }\n    `;\n\n    expect(await go(code)).toMatchSnapshot();\n  });\n\n  it('hoistExpression with object', async () => {\n    const code = dedent`\n      const obj = {\n        variable: \"test\",\n      }\n\n      function fn() {\n        const template = tag\\`${'${obj.variable}'}\\`;\n      }\n    `;\n\n    expect(await go(code)).toMatchSnapshot();\n  });\n});\n"],"mappings":";;AAAA;;AAEA;;AACA;;AACA;;AAGA;;;;;;;;AAEA,MAAM;EAAEA;AAAF,IAAWC,KAAjB;;AAEA,eAAeC,EAAf,CAAkBC,IAAlB,EAAiD;EAC/C,MAAMC,MAAM,GAAI,MAAM,IAAAC,gBAAA,EAAWF,IAAX,EAAiB;IACrCG,QAAQ,EAAEC;EAD2B,CAAjB,CAAtB;EAIA,MAAMC,IAAI,GAAG,IAAIR,IAAJ,CAAS;IAAEM,QAAQ,EAAEC;EAAZ,CAAT,EAAmC;IAAEJ,IAAF;IAAQM,GAAG,EAAEL;EAAb,CAAnC,CAAb;EAEAI,IAAI,CAACE,IAAL,CAAUC,QAAV,CAAmB;IACjBC,eAAe,CAACF,IAAD,EAAO;MACpB,MAAMG,WAAW,GAAGH,IAAI,CAACI,GAAL,CAAS,aAAT,CAApB;MACAD,WAAW,CAACE,OAAZ,CAAqBC,GAAD,IAAS;QAC3B,IAAIA,GAAG,CAACC,YAAJ,EAAJ,EAAwB;UACtB,IAAAC,8CAAA,EAAkBF,GAAlB,EAAuB,IAAvB,EAA6B,KAA7B;QACD;MACF,CAJD;IAKD;;EARgB,CAAnB;EAWA,OAAO,IAAAG,kBAAA,EAASf,MAAT,EAAiBD,IAAxB;AACD;;AAEDiB,QAAQ,CAAC,6BAAD,EAAgC,MAAM;EAC5CC,EAAE,CAAC,mBAAD,EAAsB,YAAY;IAClC,MAAMlB,IAAI,GAAG,IAAAmB,eAAA,CAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAe,GAAE,aAAc,GAAE,mBAAoB,GAAE,cAAe;AACtG;AACA,KATI;IAWAC,MAAM,CAAC,MAAMrB,EAAE,CAACC,IAAD,CAAT,CAAN,CAAuBqB,eAAvB;EACD,CAbC,CAAF;EAeAH,EAAE,CAAC,wCAAD,EAA2C,YAAY;IACvD,MAAMlB,IAAI,GAAG,IAAAmB,eAAA,CAAO;AACxB;AACA;AACA;AACA;AACA;AACA,sBAAsB,oBAAqB;AAC3C;AACA;AACA,KATI;IAWAC,MAAM,CAAC,MAAMrB,EAAE,CAACC,IAAD,CAAT,CAAN,CAAuBqB,eAAvB;EACD,CAbC,CAAF;EAeAH,EAAE,CAAC,0BAAD,EAA6B,YAAY;IACzCE,MAAM,CAACE,UAAP,CAAkB,CAAlB;IAEA,MAAMtB,IAAI,GAAG,IAAAmB,eAAA,CAAO;AACxB;AACA;AACA;AACA;AACA,kCAAkC,aAAc;AAChD;AACA;AACA,KARI;;IAUA,IAAI;MACF,MAAMpB,EAAE,CAACC,IAAD,CAAR;IACD,CAFD,CAEE,OAAOuB,CAAP,EAAU;MACVH,MAAM,CAAC,IAAAI,kBAAA,EAAWD,CAAD,CAA2BE,OAArC,CAAD,CAAN,CAAsDJ,eAAtD;IACD;EACF,CAlBC,CAAF;EAoBAH,EAAE,CAAC,2BAAD,EAA8B,YAAY;IAC1C,MAAMlB,IAAI,GAAG,IAAAmB,eAAA,CAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,aAAc;AAChD;AACA;AACA,KAVI;IAYAC,MAAM,CAAC,MAAMrB,EAAE,CAACC,IAAD,CAAT,CAAN,CAAuBqB,eAAvB;EACD,CAdC,CAAF;EAgBAH,EAAE,CAAC,oCAAD,EAAuC,YAAY;IACnD,MAAMlB,IAAI,GAAG,IAAAmB,eAAA,CAAO;AACxB;AACA;AACA;AACA,gCAAgC,aAAc;AAC9C;AACA,KANI;IAQAC,MAAM,CAAC,MAAMrB,EAAE,CAACC,IAAD,CAAT,CAAN,CAAuBqB,eAAvB;EACD,CAVC,CAAF;EAYAH,EAAE,CAAC,6BAAD,EAAgC,YAAY;IAC5C,MAAMlB,IAAI,GAAG,IAAAmB,eAAA,CAAO;AACxB;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAkB;AAClD;AACA,KARI;IAUAC,MAAM,CAAC,MAAMrB,EAAE,CAACC,IAAD,CAAT,CAAN,CAAuBqB,eAAvB;EACD,CAZC,CAAF;AAaD,CA5FO,CAAR"}