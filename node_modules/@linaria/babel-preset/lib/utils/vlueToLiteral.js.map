{"version":3,"file":"vlueToLiteral.js","names":["valueToLiteral","value","ex","undefined","type","name","isSerializable","Array","isArray","elements","map","v","properties","Object","entries","key","match","computed","shorthand","buildCodeFrameError","getSource"],"sources":["../../src/utils/vlueToLiteral.ts"],"sourcesContent":["import type { NodePath } from '@babel/traverse';\nimport type { Expression } from '@babel/types';\n\nimport { isSerializable } from '@linaria/tags';\n\nimport getSource from './getSource';\n\nexport default function valueToLiteral(\n  value: unknown,\n  ex: NodePath\n): Expression {\n  if (value === undefined) {\n    return {\n      type: 'Identifier',\n      name: 'undefined',\n    };\n  }\n\n  if (isSerializable(value)) {\n    if (value === null) {\n      return {\n        type: 'NullLiteral',\n      };\n    }\n\n    if (typeof value === 'string') {\n      return {\n        type: 'StringLiteral',\n        value,\n      };\n    }\n\n    if (typeof value === 'number') {\n      return {\n        type: 'NumericLiteral',\n        value,\n      };\n    }\n\n    if (typeof value === 'boolean') {\n      return {\n        type: 'BooleanLiteral',\n        value,\n      };\n    }\n\n    if (Array.isArray(value)) {\n      return {\n        type: 'ArrayExpression',\n        elements: value.map((v) => valueToLiteral(v, ex)),\n      };\n    }\n\n    return {\n      type: 'ObjectExpression',\n      properties: Object.entries(value).map(([key, v]) => ({\n        type: 'ObjectProperty',\n        key: key.match(/^[a-zA-Z]\\w*$/)\n          ? {\n              type: 'Identifier',\n              name: key,\n            }\n          : {\n              type: 'StringLiteral',\n              value: key,\n            },\n        value: valueToLiteral(v, ex),\n        computed: false,\n        shorthand: false,\n      })),\n    };\n  }\n\n  throw ex.buildCodeFrameError(\n    `The expression evaluated to '${value}', which is probably a mistake. If you want it to be inserted into CSS, explicitly cast or transform the value to a string, e.g. - 'String(${getSource(\n      ex\n    )})'.`\n  );\n}\n"],"mappings":";;;;;;;AAGA;;AAEA;;;;AAEe,SAASA,cAAT,CACbC,KADa,EAEbC,EAFa,EAGD;EACZ,IAAID,KAAK,KAAKE,SAAd,EAAyB;IACvB,OAAO;MACLC,IAAI,EAAE,YADD;MAELC,IAAI,EAAE;IAFD,CAAP;EAID;;EAED,IAAI,IAAAC,oBAAA,EAAeL,KAAf,CAAJ,EAA2B;IACzB,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO;QACLG,IAAI,EAAE;MADD,CAAP;IAGD;;IAED,IAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;MAC7B,OAAO;QACLG,IAAI,EAAE,eADD;QAELH;MAFK,CAAP;IAID;;IAED,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B,OAAO;QACLG,IAAI,EAAE,gBADD;QAELH;MAFK,CAAP;IAID;;IAED,IAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;MAC9B,OAAO;QACLG,IAAI,EAAE,gBADD;QAELH;MAFK,CAAP;IAID;;IAED,IAAIM,KAAK,CAACC,OAAN,CAAcP,KAAd,CAAJ,EAA0B;MACxB,OAAO;QACLG,IAAI,EAAE,iBADD;QAELK,QAAQ,EAAER,KAAK,CAACS,GAAN,CAAWC,CAAD,IAAOX,cAAc,CAACW,CAAD,EAAIT,EAAJ,CAA/B;MAFL,CAAP;IAID;;IAED,OAAO;MACLE,IAAI,EAAE,kBADD;MAELQ,UAAU,EAAEC,MAAM,CAACC,OAAP,CAAeb,KAAf,EAAsBS,GAAtB,CAA0B,CAAC,CAACK,GAAD,EAAMJ,CAAN,CAAD,MAAe;QACnDP,IAAI,EAAE,gBAD6C;QAEnDW,GAAG,EAAEA,GAAG,CAACC,KAAJ,CAAU,eAAV,IACD;UACEZ,IAAI,EAAE,YADR;UAEEC,IAAI,EAAEU;QAFR,CADC,GAKD;UACEX,IAAI,EAAE,eADR;UAEEH,KAAK,EAAEc;QAFT,CAP+C;QAWnDd,KAAK,EAAED,cAAc,CAACW,CAAD,EAAIT,EAAJ,CAX8B;QAYnDe,QAAQ,EAAE,KAZyC;QAanDC,SAAS,EAAE;MAbwC,CAAf,CAA1B;IAFP,CAAP;EAkBD;;EAED,MAAMhB,EAAE,CAACiB,mBAAH,CACH,gCAA+BlB,KAAM,8IAA6I,IAAAmB,kBAAA,EACjLlB,EADiL,CAEjL,KAHE,CAAN;AAKD"}