{"version":3,"file":"processTemplateExpression.js","names":["processed","WeakSet","processTemplateExpression","p","fileContext","options","emit","has","node","tagProcessor","getTagProcessor","add"],"sources":["../../src/utils/processTemplateExpression.ts"],"sourcesContent":["import type { NodePath } from '@babel/traverse';\nimport type { Identifier } from '@babel/types';\n\nimport type { BaseProcessor, IFileContext } from '@linaria/tags';\nimport type { StrictOptions } from '@linaria/utils';\n\nimport getTagProcessor from './getTagProcessor';\n\nconst processed = new WeakSet<Identifier>();\n\nconst processTemplateExpression = (\n  p: NodePath<Identifier>,\n  fileContext: IFileContext,\n  options: Pick<\n    StrictOptions,\n    'classNameSlug' | 'displayName' | 'evaluate' | 'tagResolver'\n  >,\n  emit: (processor: BaseProcessor) => void\n) => {\n  if (processed.has(p.node)) return;\n\n  const tagProcessor = getTagProcessor(p, fileContext, options);\n\n  processed.add(p.node);\n\n  if (tagProcessor === null) return;\n\n  emit(tagProcessor);\n};\n\nexport default processTemplateExpression;\n"],"mappings":";;;;;;;AAMA;;;;AAEA,MAAMA,SAAS,GAAG,IAAIC,OAAJ,EAAlB;;AAEA,MAAMC,yBAAyB,GAAG,CAChCC,CADgC,EAEhCC,WAFgC,EAGhCC,OAHgC,EAOhCC,IAPgC,KAQ7B;EACH,IAAIN,SAAS,CAACO,GAAV,CAAcJ,CAAC,CAACK,IAAhB,CAAJ,EAA2B;EAE3B,MAAMC,YAAY,GAAG,IAAAC,wBAAA,EAAgBP,CAAhB,EAAmBC,WAAnB,EAAgCC,OAAhC,CAArB;EAEAL,SAAS,CAACW,GAAV,CAAcR,CAAC,CAACK,IAAhB;EAEA,IAAIC,YAAY,KAAK,IAArB,EAA2B;EAE3BH,IAAI,CAACG,YAAD,CAAJ;AACD,CAlBD;;eAoBeP,yB"}